# Copyright (c) 2015 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---

- shell: bosh --no-color -n upload release {{ item }}
  register: shell_result
  changed_when: shell_result.stdout | search('Release uploaded')
  failed_when: shell_result.rc != 0 and not shell_result.stdout | search('Release `.*\' already exists')
  with_items:
    - https://bosh.io/d/github.com/cloudfoundry/cf-release?v={{ cf_release_version }}
    - https://bosh.io/d/github.com/cf-platform-eng/docker-boshrelease?v={{ docker_release_version }}
    - https://repo.gotapaas.eu/files/uaa-intel-4.tgz

- shell: bosh --no-color -n upload stemcell https://bosh.io/d/stemcells/{{ cf_bosh_stemcell_name }}?v={{ cf_bosh_stemcell_version }}
  register: shell_result
  changed_when: shell_result.stdout | search('Stemcell uploaded and created.')
  failed_when: shell_result.rc != 0 and not shell_result.stdout | search('Stemcell `.*\' already exists')

- template: src={{ item }}.yml.j2 dest={{ ansible_env['HOME'] }}/{{ item }}.yml
            validate='python -c "import yaml; yaml.load(file('%s', 'r'))"'
  register: template_result
  with_items:
    - cf
    - docker-broker

- shell: bosh --no-color -n deployment {{ ansible_env['HOME'] }}/{{ item }}.yml
  when: template_result.changed
  notify:
    - Deploy
  with_items:
    - cf

- meta: flush_handlers

- shell: "{{ item }}"
  failed_when: shell_result.rc != 0 and not shell_result.stdout | search('(already exists)|(no new users given)')
  with_items:
    - uaac target https://uaa.{{ cf_system_domain }}/ --skip-ssl-validation
    - uaac token client get admin -s {{ cf_password }}
    - uaac group add console.admin
    - uaac member add console.admin admin
    - >-
      uaac client add atk-client
      --scope cloud_controller.read,cloud_controller.write,cloud_controller_service_permissions.read,openid
      --authorized_grant_types authorization_code,password,refresh_token
      --redirect_uri http://atkdash.{{ cf_system_domain }}/managed/auth/cloudfoundry/callback
      --authorities uaa.none
      --secret {{ cf_password }}
    - >-
      uaac client add tap_console
      --scope cloud_controller.admin,cloud_controller.read,cloud_controller.write,console.admin,doppler.firehose,openid,password.write,scim.read,scim.userids,scim.write
      --authorized_grant_types authorization_code,client_credentials,refresh_token
      --redirect_uri http://console.{{ cf_system_domain }}/oauth/callback,https://console.{{ cf_system_domain }}/oauth/callback
      --authorities scim.read,uaa.admin,cloud_controller.admin,billing.admin,uaa.resource,password.write,scim.write,cloud_controller.write,cloud_controller.read
      --autoapprove true
      --access_token_validity 1209600
      --refresh_token_validity 1209600
      --secret {{ cf_password }}
    - uaac client update cf --scope cloud_controller.admin,cloud_controller.read,cloud_controller.write,doppler.firehose,openid,password.write,scim.read,scim.write,console.admin

- shell: bosh --no-color -n deployment {{ ansible_env['HOME'] }}/{{ item }}.yml
  when: template_result.changed
  notify:
    - Deploy
  with_items:
    - docker-broker

- meta: flush_handlers

- pip: name=docker-py version=1.1.0

- docker:
    image: "{{ item.1.container.image }}:{{ item.1.container.tag }}"
    docker_url: "{{ docker_url }}"
  with_subelements:
    - "{{ docker_broker_services }}"
    - plans

- docker:
    name: registrator
    image: gliderlabs/registrator:v6
    memory_limit: 256MB
    command: -resync 3600 -ip {{ docker_ip }} consul://cdh-master-0.node.consul:8080
    volumes:
    - /var/vcap/data/sys/run/docker:/tmp/docker
    env:
      DOCKER_HOST: unix:///tmp/docker/docker.sock
    docker_url: "{{ docker_url }}"

- docker:
    name: h2oprovisioner
    image: quay.io/trustedanalytics/h2o-provisioner
    memory_limit: 1GB
    ports:
    - 9876:8080
    - 54310:54310
    - 54311:54311
    - 54312:54312
    - 54313:54313
    - 54314:54314
    - 54315:54315
    - 54316:54316
    - 54317:54317
    - 54318:54318
    - 54319:54319
    env:
      DRIVER_PORT_LOWER: 54310
      DRIVER_PORT_HIGHER: 54319
      DRIVER_IP: "{{ docker_ip }}"
      KRB_KDC: cdh-manager-0.node.consul
      KRB_REALM: CLOUDERA
      KRB_USER: cf
      KRB_PASSWORD: cf1
    docker_url: "{{ docker_url }}"
    registry: quay.io
    username: "{{ quay_io_username }}"
    password: "{{ quay_io_password }}"
  when: (quay_io_username is defined and quay_io_username != '') or
        (quay_io_password is defined and quay_io_password != '')

# vi:et:sw=2 ts=2 sts=2 ft=ansible
