# Copyright (c) 2015 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---

- shell: bosh --no-color -n upload release {{ item }}
  register: shell_result
  changed_when: shell_result.stdout | search('Release uploaded')
  failed_when: shell_result.rc != 0 and not shell_result.stdout | search('Release `.*\' already exists')
  with_items:
    - https://bosh.io/d/github.com/cloudfoundry/cf-release?v={{ cf_release_version }}
    - https://bosh.io/d/github.com/cf-platform-eng/docker-boshrelease?v={{ docker_release_version }}
    - https://repo.gotapaas.eu/files/uaa-intel-4.tgz

- shell: bosh --no-color -n upload stemcell https://bosh.io/d/stemcells/{{ cf_bosh_stemcell_name }}?v={{ cf_bosh_stemcell_version }}
  register: shell_result
  changed_when: shell_result.stdout | search('Stemcell uploaded and created.')
  failed_when: shell_result.rc != 0 and not shell_result.stdout | search('Stemcell `.*\' already exists')

- template: src={{ item }}.yml.j2 dest={{ ansible_env['HOME'] }}/{{ item }}.yml
            validate='python -c "import yaml; yaml.load(file('%s', 'r'))"'
  register: template_result
  with_items:
    - cf
    - docker-broker

- shell: bosh --no-color -n deployment {{ ansible_env['HOME'] }}/{{ item }}.yml
  when: template_result.changed
  notify:
    - Deploy
  with_items:
    - cf

- meta: flush_handlers

- shell: "{{ item }}"
  register: shell_result
  failed_when: shell_result.rc != 0 and not shell_result.stdout | search('(already exists)|(no new users given)')
  with_items:
    - uaac target https://uaa.{{ cf_system_domain }}/ --skip-ssl-validation
    - uaac token client get admin -s {{ cf_password }}
    - uaac group add console.admin
    - uaac member add console.admin admin
    - >-
      uaac client add atk-client
      --scope cloud_controller.read,cloud_controller.write,cloud_controller_service_permissions.read,openid
      --authorized_grant_types authorization_code,password,refresh_token
      --redirect_uri http://atkdash.{{ cf_system_domain }}/managed/auth/cloudfoundry/callback
      --authorities uaa.none
      --secret {{ cf_password }}
    - >-
      uaac client add tap_console
      --scope cloud_controller.admin,cloud_controller.read,cloud_controller.write,console.admin,doppler.firehose,openid,password.write,scim.read,scim.userids,scim.write
      --authorized_grant_types authorization_code,client_credentials,refresh_token
      --redirect_uri http://console.{{ cf_system_domain }}/oauth/callback,https://console.{{ cf_system_domain }}/oauth/callback
      --authorities scim.read,uaa.admin,cloud_controller.admin,billing.admin,uaa.resource,password.write,scim.write,cloud_controller.write,cloud_controller.read
      --autoapprove true
      --access_token_validity 1209600
      --refresh_token_validity 1209600
      --secret {{ cf_password }}
    - uaac client update cf --scope cloud_controller.admin,cloud_controller.read,cloud_controller.write,doppler.firehose,openid,password.write,scim.read,scim.write,console.admin

- shell: uaac clients
  register: shell_result
  failed_when: shell_result.rc != 0 or not shell_result.stdout | search('tap_console')

- shell: bosh --no-color -n deployment {{ ansible_env['HOME'] }}/{{ item }}.yml
  when: template_result.changed
  notify:
    - Deploy
  with_items:
    - docker-broker

- meta: flush_handlers

- pip: name=awscli version=1.10.22

- shell: bosh instances --detail | sed -nr 's/.*broker.* (i-[a-zA-Z0-9]+) .*$/\1/p'
  register: shell_result

- set_fact:
    docker_instance_id: "{{ shell_result.stdout }}"

- name: create route
  shell: "aws ec2 create-route --route-table-id {{ private_route_table.id }} --destination-cidr-block 172.17.0.0/16 --instance-id {{ docker_instance_id }}"
  environment:
    AWS_DEFAULT_REGION: "{{ region | mandatory }}"

- name: set source-dest-check
  shell: 'aws ec2 modify-instance-attribute --instance-id {{ docker_instance_id }} --source-dest-check "{\"Value\": false}"'
  environment:
    AWS_DEFAULT_REGION: "{{ region | mandatory }}"

- pip: name=docker-py version=1.8.1

- set_fact:
    docker_manifest: "{{ lookup('file', 'templates/docker-broker.yml.j2') | from_yaml }}"

- set_fact:
    docker_plans: "{{ docker_manifest.properties.broker.services }}"

#docker_login doesnt support setting the api version, have to log in using client
- apt: name=docker.io state=installed

- copy: dest=/etc/profile.d/docker.sh content="export DOCKER_HOST={{ docker_url }}"

- shell: "docker login -u {{ quay_io_username }} -p {{ quay_io_password }} -e test@test quay.io"
  environment:
    DOCKER_HOST: "{{ docker_url }}"
  when: quay_io_username and quay_io_password

#docker_image doesn't work for downloading images only: https://github.com/ansible/ansible-modules-core/issues/2991
#download non-quay images when no quay username provided
- shell: "docker pull {{ item.plans[0].container.image }}:{{ item.plans[0].container.tag }}"
  environment:
    DOCKER_HOST: "{{ docker_url }}"
  register: shell_result
  changed_when: not shell_result.stdout | search("Image is up to date")
  with_items: "{{ docker_plans }}"
  when: (not quay_io_username or not quay_io_password) and not "quay" in item.plans[0].container.image

#download all images when quay username provided
- shell: "docker pull {{ item.plans[0].container.image }}:{{ item.plans[0].container.tag }}"
  environment:
    DOCKER_HOST: "{{ docker_url }}"
  register: shell_result
  changed_when: not shell_result.stdout | search("Image is up to date")
  with_items: "{{ docker_plans }}"
  when: quay_io_username and quay_io_password

- docker:
    name: registrator
    image: gliderlabs/registrator:v6
    memory_limit: 256000000
    command: -resync 3600 -ip {{ docker_ip }} consul://cdh-master-0.node.consul:8080
    volumes:
      - /var/vcap/data/sys/run/docker:/tmp/docker
    env:
      DOCKER_HOST: unix:///tmp/docker/docker.sock
    docker_api_version: 1.21
    docker_url: "{{ docker_url }}"

- docker:
    name: registry
    image: registry:2.4.0
    memory_limit: 1024000000
    ports:
    - 5000:5000
    env:
      STORAGE_PATH: /registry
      SETTINGS_FLAVOR: local
    volumes:
    - /var/vcap/data/registry:/registry
    docker_api_version: 1.21
    docker_url: "{{ docker_url }}"

- docker:
    name: h2oprovisioner
    image: quay.io/trustedanalytics/h2o-provisioner
    memory_limit: 1024000000
    ports:
      - 9876:8080
      - 54310:54310
      - 54311:54311
      - 54312:54312
      - 54313:54313
      - 54314:54314
      - 54315:54315
      - 54316:54316
      - 54317:54317
      - 54318:54318
      - 54319:54319
    env:
      DRIVER_PORT_LOWER: 54310
      DRIVER_PORT_HIGHER: 54319
      DRIVER_IP: "{{ docker_ip }}"
      KRB_KDC: cdh-manager-0.node.consul
      KRB_REALM: CLOUDERA
      KRB_USER: cf
      KRB_PASSWORD: cf1
    docker_api_version: 1.21
    docker_url: "{{ docker_url }}"
  when: quay_io_username and quay_io_password

- include: jupyter_build.yml

# vi:et:sw=2 ts=2 sts=2 ft=ansible
