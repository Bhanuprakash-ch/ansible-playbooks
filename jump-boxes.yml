# Copyright (c) 2015 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---

- name: Create a Key Pair
  hosts: jump-boxes
  handlers:
    - name: Signal the key name wait condition handle
      command: cfn-signal -s true -r 'The public key file imported.' {{ key_name_wait_condition_handle }}
  tasks:
    - name: Create the RSA Key Pair
      user: name={{ ansible_user_id }} generate_ssh_key=yes
      register: user_result
    - name: Import the public key to Amazon EC2
      ec2_key:
        name: "{{ key_name | mandatory }}"
        key_material: "{{ user_result.ssh_public_key }}"
        region: "{{ region | mandatory }}"
        wait: yes
        state: present
      notify:
        - Signal the key name wait condition handle
    - meta: flush_handlers
    - name: Set the key pair used by BOSH
      set_fact: bosh_default_key_name={{ key_name | mandatory }}
                bosh_private_key={{ user_result.ssh_key_file }}

- name: Install BOSH
  hosts: jump-boxes
  pre_tasks:
    # https://github.com/rvm/rvm/issues/3509
    # http://www.nokogiri.org/tutorials/installing_nokogiri.html#ubuntu___debian
    - name: Install libgmp
      apt: name=libgmp-dev state=present
      become: yes
      when: ansible_distribution == 'Ubuntu'
    - name: Generate passwords
      set_fact:
        "{{ item }}": "{{ lookup('password', playbook_dir + '/credentials/' + item + ' chars=ascii_letters,digits length=16') }}"
      with_items:
        - bosh_nats_password
        - bosh_redis_password
        - bosh_postgres_password
        - bosh_registry_password
        - bosh_director_password
        - bosh_agent_password
        - bosh_admin_password
        - bosh_hm_password
        - bosh_mbus_password
    - ec2_vpc_subnet_facts:
        region: "{{ region | mandatory }}"
        filters:
          subnet-id: "{{ bosh_subnet_id | mandatory }}"
      register: ec2_vpc_subnet_facts_result
    - set_fact:
        bosh_subnet: "{{ ec2_vpc_subnet_facts_result.subnets | first }}"
  roles:
    - rvm_io.rvm1-ruby
    - role: bosh
      bosh_director_name: "{{ stack | mandatory }}-bosh"
      bosh_region: "{{ region | mandatory }}"
  environment:
    PATH: "{{ rvm1_install_path }}/gems/{{ rvm1_rubies | last }}/bin:{{ ansible_env.PATH }}"

- name: Deploy Trusted Analytics Platform
  hosts: jump-boxes
  pre_tasks:
    - name: Generate passwords
      set_fact:
        "{{ item }}": "{{ lookup('password', playbook_dir + '/credentials/' + item + ' chars=ascii_letters,digits length=16') }}"
      with_items:
        - cf_bulk_api_password
        - cf_ccdb_encryption_key
        - cf_staging_upload_password
        - cf_ccdb_user_password
        - cf_loggregator_endpoint_shared_secret
        - cf_nats_password
        - cf_admin_secret
        - cf_cc_client_secret
        - cf_cc_routing_secret
        - cf_cloud_controller_username_lookup_secret
        - cf_doppler_secret
        - cf_gorouter_secret
        - cf_login_client_secret
        - cf_notifications_client_secret
        - cf_uaadb_user_password
    - ec2_vpc_subnet_facts:
        region: "{{ region | mandatory }}"
        filters:
          subnet-id: "{{ cf_private_subnet_id | mandatory }}"
      register: ec2_vpc_subnet_facts_result
    - set_fact:
        cf_private_subnet: "{{ ec2_vpc_subnet_facts_result.subnets | first }}"
    - ec2_vpc_subnet_facts:
        region: "{{ region | mandatory }}"
        filters:
          subnet-id: "{{ cf_public_subnet_id | mandatory }}"
      register: ec2_vpc_subnet_facts_result
    - set_fact:
        cf_public_subnet: "{{ ec2_vpc_subnet_facts_result.subnets | first }}"
    - ec2_vpc_subnet_facts:
        region: "{{ region | mandatory }}"
        filters:
          subnet-id: "{{ docker_subnet_id | mandatory }}"
      register: ec2_vpc_subnet_facts_result
    - set_fact:
        docker_subnet: "{{ ec2_vpc_subnet_facts_result.subnets | first }}"
  roles:
    - role: tap
      cf_director_uuid: "{{ bosh_director_uuid }}"
      cf_dns: "{{ bosh_dns }}"
      cf_bosh_security_group: "{{ bosh_default_security_groups | first }}"
      cf_bosh_stemcell_version: "{{ bosh_stemcell_version }}"
  environment:
    PATH: "{{ rvm1_install_path }}/gems/{{ rvm1_rubies | last }}/bin:{{ ansible_env.PATH }}"

# vi:et:sw=2 ts=2 sts=2 ft=ansible
